Description: fix test that use environment-dependent tricks to pass time
Author: Jérémy Lal <kapouer@melix.org>
Last-Update: 2019-01-07
Forwarded: https://github.com/isaacs/node-lru-cache/pull/145
--- a/test/basic.js
+++ b/test/basic.js
@@ -202,7 +202,7 @@
 })
 
 test('drop the old items', function (t) {
-  var n = process.env.CI ? 1000 : 100
+  var n = process.env.CI ? 10000 : 1000
   var cache = new LRU({
     max: 5,
     maxAge: n * 2
@@ -338,7 +338,7 @@
 test('has()', function (t) {
   var cache = new LRU({
     max: 1,
-    maxAge: 10
+    maxAge: 500
   })
 
   cache.set('foo', 'bar')
@@ -349,12 +349,12 @@
   setTimeout(function () {
     t.equal(cache.has('blu'), false)
     t.end()
-  }, 15)
+  }, 600)
 })
 
 test('stale', function (t) {
   var cache = new LRU({
-    maxAge: 10,
+    maxAge: 500,
     stale: true
   })
 
@@ -372,7 +372,7 @@
     t.equal(cache.get('foo'), 'bar')
     t.equal(cache.get('foo'), undefined)
     t.end()
-  }, 15)
+  }, 600)
 })
 
 test('lru update via set', function (t) {
@@ -548,18 +548,18 @@
 })
 
 test('update age on get', t => {
-  const l = new LRU({ updateAgeOnGet: true, maxAge: 10 })
+  const l = new LRU({ updateAgeOnGet: true, maxAge: 1000 })
   l.set('foo', 'bar')
   const e1 = l.dump()[0].e
-  // spin for 5ms
-  for (let then = Date.now() + 5; then > Date.now(); );
-  l.get('foo')
-  const e2 = l.dump()[0].e
-  // spin for 5ms
-  for (let then = Date.now() + 5; then > Date.now(); );
-  l.get('foo')
-  const e3 = l.dump()[0].e
-  t.ok(e1 < e2, 'time updated on first get')
-  t.ok(e2 < e3, 'time updated on second get')
-  t.end()
+  setTimeout(function() {
+  	l.get('foo')
+    const e2 = l.dump()[0].e
+    setTimeout(function() {
+      l.get('foo')
+      const e3 = l.dump()[0].e
+      t.ok(e1 < e2, 'time updated on first get')
+      t.ok(e2 < e3, 'time updated on second get')
+      t.end()
+    }, 500)
+  }, 500)
 })
--- a/test/foreach.js
+++ b/test/foreach.js
@@ -104,13 +104,14 @@
 })
 
 test('expires', function (t) {
+	var base = 500
   var l = new LRU({
     max: 10,
-    maxAge: 50
+    maxAge: base
   })
   var i
   for (i = 0; i < 10; i++) {
-    l.set(i.toString(), i.toString(2), ((i % 2) ? 25 : undefined))
+    l.set(i.toString(), i.toString(2), ((i % 2) ? (base / 2) : undefined))
   }
 
   i = 0
@@ -129,6 +130,6 @@
       l.forEach(function (val, key, cache) { count++ })
       t.equal(0, count)
       t.end()
-    }, 25)
-  }, 26)
+    }, base / 2)
+  }, base / 2 + base / 10)
 })
